include modules.mk

SRCDIR := .
OUTDIR := $(SRCDIR)/out
BINDIR := $(OUTDIR)/bin
LIBDIR := $(OUTDIR)/lib

CFLAGS_global := -Wall -MMD -I./inc
LDFLAGS_global1 :=
LDFLAGS_global2 :=

ARFLAGS := cr

CROSS_COMPILE ?=
CC := $(CROSS_COMPILE)gcc

.PHONY: all clean distclean install

.DEFAULT_GOAL := all

# Suppress annoying output unless V is set
#define V
ifndef V
	SILENT_CC       = @echo '  [CC]       ' $(@:$(BUILD_PATH)/%.o=%.c);
	SILENT_AS       = @echo '  [AS]       ' $(@:$(BUILD_PATH)/%.o=%.S);
	SILENT_CXX      = @echo '  [CXX]      ' $(@:$(BUILD_PATH)/%.o=%.cpp);
	SILENT_LD       = @echo '  [LD]       ' $(@F);
	SILENT_AR       = @echo '  [AR]       ' $(@F);
	SILENT_OBJCOPY  = @echo '  [OBJCOPY]  ' $(@F);
	SILENT_DISAS    = @echo '  [DISAS]    ' $(@:$(BUILD_PATH)/%.bin=%).lss;
	SILENT_OBJDUMP  = @echo '  [OBJDUMP]  ' $(OBJDUMP);
	SILENT_NM       = @echo '  [NM]       ' $(@:$(BUILD_PATH)/%.bin=%).sym;
endif
#endef

###################################################################
# What follows are several templates (think "functions"), which are
# later instantiated for each registered module ($(1) being the
# module name).
###################################################################

# Setting a module's build rules for object files.
define RULES_template
$(1)/%.o: $(1)/%.c
	$$(SILENT_CC) $$(CC) $$(CFLAGS) $$(CFLAGS_global) $$(CFLAGS_$(1)) -c $$< -o $$@
endef

# Setting a module's build rules for executable targets.
# (Depending on its sources' object files and any libraries.)
# Also adds a module's dependency files to the global list.
define BINARY_template
DEPENDENCIES := $(DEPENDENCIES) $(patsubst %,$(2)/%.d,$(basename $(SOURCES_$(1))))
TARGETS += $(BINDIR)/$(1)
$(BINDIR)/$(1): $(patsubst %,$(2)/%.o,$(basename $(SOURCES_$(1)))) $(foreach library,$(LIBRARIES_$(1)),$(LIBDIR)/$(library))
	$$(SILENT_LD) $$(CC) $$(LDFLAGS_global1) $$(LDFLAGS_$(2)) $$^ $$(LDFLAGS_global2) -o $$@
endef

# Setting a module's build rules for archive targets.
# (Depending on its sources' object files.)
define LIBRARY_template
DEPENDENCIES := $(DEPENDENCIES) $(patsubst %,$(2)/%.d,$(basename $(SOURCES_$(1))))
TARGETS += $(LIBDIR)/$(1).a
$(LIBDIR)/$(1).a: $(patsubst %,$(2)/%.o,$(basename $(SOURCES_$(1))))
	$$(SILENT_AR) $$(AR) $$(ARFLAGS) $$@ $$?
	$$(SILENT_CC) $$(CC) -fPIC -shared -Wl,-whole-archive $$@ -Wl,--no-whole-archive -o $(LIBDIR)/$(1).so
endef

# Now, instantiating the templates for each module.
$(foreach module,$(MODULES),$(eval include $(module)/build.mk))
$(foreach module,$(MODULES),$(eval $(call RULES_template,$(module))))
$(foreach module,$(MODULES),$(eval $(foreach binary,$(BINARY_$(module)),$(call BINARY_template,$(binary),$(module)))))
$(foreach module,$(MODULES),$(eval $(foreach library,$(LIBRARY_$(module)),$(call LIBRARY_template,$(library),$(module)))))

# Include the dependency files (generated by GCC's -MMD option)
-include $(sort $(DEPENDENCIES))

build_env:
	@mkdir -p $(BINDIR) $(LIBDIR)

all: build_env $(TARGETS) install
#	@echo TARGETS: $(TARGETS)

clean:
	@find $(SRCDIR) -name \*.o -prune -type f | xargs $(RM)
	@find $(SRCDIR) -name \*.d -prune -type f | xargs $(RM)
	@$(RM) $(BINDIR)/* $(LIBDIR)/*

distclean: clean
	@$(RM) -r $(OUTDIR)

install: build_env $(TARGETS)
	@echo "Ready:"
	@ls $(BINDIR)
	@ls $(LIBDIR)
